# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import os
import sys
sys.path.insert(0, os.path.abspath('../'))

"""
sys.path.append(os.path.abspath(
    os.path.join(__file__, "../hbbrain")
))

sys.path.append(os.path.abspath(
    os.path.join(__file__, "../hbbrain/base")
))
sys.path.append(os.path.abspath(
    os.path.join(__file__, "../hbbrain/mixed_data")
))
sys.path.append(os.path.abspath(
    os.path.join(__file__, "../hbbrain/numerical_data")
))
sys.path.append(os.path.abspath(
    os.path.join(__file__, "../hbbrain/utils")
))
"""

#  on_rtd is whether we are on readthedocs.org, this line of code grabbed
#  from docs.readthedocs.org
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# -- Project information -----------------------------------------------------

project = 'hyperbox-brain'
copyright = '2022, Thanh Tung Khuat and Bogdan Gabrys'
author = 'Thanh Tung Khuat and Bogdan Gabrys'

# The full version, including alpha/beta/rc tags
release = '0.1'

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
	'sphinx.ext.autodoc',
	'numpydoc',
	'sphinx.ext.duration',
    'sphinx.ext.doctest',
	'sphinx.ext.autosummary',
	'sphinx.ext.autosectionlabel',
    'nbsphinx',
    'sphinx.ext.mathjax',
    'sphinx.ext.githubpages',
    'sphinx.ext.linkcode',
    'IPython.sphinxext.ipython_console_highlighting'
]

# 'sphinx.ext.viewcode',

numpydoc_class_members_toctree = False

source_suffix = ['.rst']

autosummary_generate = True

# The master toctree document.
master_doc = 'index'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'Python'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', '**tests**', '.ipynb_checkpoints']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# Output file base name for HTML help builder.
html_title = 'hbbrain'
htmlhelp_basename = 'hbbraindoc'
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

def setup(app):
    app.add_css_file('css/my_theme.css')
	
if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# -- GitHub source code link ----------------------------------------------

# Functionality to build github source URI, taken from sklearn.

from operator import attrgetter
import inspect
import subprocess
from functools import partial

def linkcode_resolve(domain, info):
    def find_source():
        # try to find the file and line number, based on code from numpy:
        # https://github.com/numpy/numpy/blob/master/doc/source/conf.py#L286
        obj = sys.modules[info['module']]
        for part in info['fullname'].split('.'):
            obj = getattr(obj, part)
        import inspect
        import os
        fn = inspect.getsourcefile(obj)
        fn = os.path.relpath(fn, start=os.path.abspath('..'))
        source, lineno = inspect.getsourcelines(obj)
        return fn, lineno, lineno + len(source) - 1

    if domain != 'py' or not info['module']:
        return None
    try:
        filename = '%s#L%d-L%d' % find_source()
    except Exception:
        filename = info['module'].replace('.', '/') + '.py'
    import subprocess
    # tag = subprocess.Popen(['git', 'rev-parse', 'HEAD'],
    #                        stdout=subprocess.PIPE,
    #                        universal_newlines=True).communicate()[0][:-1]
    # https://github.com/runawayhorse001/statspy/blob/master/statspy/basics.py
    # https://github.com/runawayhorse001/SphinxGithub/blob/master/statspy/basics.py
    return "https://github.com/UTS-CASLab/hyperbox-brain/blob/main/%s" % (filename)

# The following is used by sphinx.ext.linkcode to provide links to github
linkcode_resolve = linkcode_resolve